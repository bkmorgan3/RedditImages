{"version":3,"sources":["utils/url.ts","components/Loading.tsx","components/SearchField.tsx","components/Images.tsx","components/ImageDetails.tsx","index.tsx"],"names":["requestURL","LoadingBackground","styled","div","Loading","SearchContainer","InputField","input","SubmitButton","button","SearchField","props","useState","searchText","setSearchText","imageData","setShouldShowIndividualImageDetails","setSelectedImage","handleMatchingPost","post","placeholder","onChange","event","target","value","onClick","find","image","title","ImagesContainer","IndividualImage","StyledImage","img","ImageTitle","h3","Images","isLoading","setIsLoading","setImageData","a","fetch","res","json","formattedImages","data","children","forEach","child","imagePostData","url","id","score","author","upvote_ratio","push","console","warn","useEffect","fetchImages","map","src","shouldShowIndividualImageDetails","handleImageClick","IndividualImageContainer","DetailsContainer","Title","h1","IndividualImageDetailsContainer","ImageContainer","TextContainer","Text","p","ReturnButton","ImageDetails","selectedImage","BackgroundContainer","MainHeader","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.f56da602.chunk.js","sourcesContent":["export const requestURL = \"http://www.reddit.com/r/pics/.json?jsonp=\";\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst LoadingBackground = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n`;\n\nexport const Loading = () => {\n  return (\n    <LoadingBackground>\n      <h2>Loading...</h2>\n    </LoadingBackground>\n  );\n};\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { IImageData } from \"../index\";\n\nconst SearchContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\n\nconst InputField = styled.input`\n  border: 3px solid #008cba;\n  border-radius: 3px;\n  margin-right: 5px;\n`;\n\nconst SubmitButton = styled.button`\n  border-radius: 4px;\n  background-color: #008cba;\n  border: none;\n`;\n\ninterface SearchFieldProps {\n  imageData: IImageData[] | null;\n  setShouldShowIndividualImageDetails: (val: boolean) => void;\n  setSelectedImage: (val: IImageData) => void;\n}\nexport const SearchField = (props: SearchFieldProps): JSX.Element => {\n  const [searchText, setSearchText] = useState<string>(\"\");\n  const { imageData, setShouldShowIndividualImageDetails, setSelectedImage } =\n    props;\n\n  const handleSearch = () => {\n    !!imageData &&\n      imageData.find((image: IImageData) => {\n        return image.title === searchText && handleMatchingPost(image);\n      });\n  };\n\n  const handleChange = (event: any) => {\n    setSearchText(event.target.value);\n  };\n\n  const handleMatchingPost = (post: IImageData) => {\n    setShouldShowIndividualImageDetails(true);\n    setSelectedImage(post);\n  };\n\n  return (\n    <SearchContainer>\n      <InputField placeholder=\"Search By Title\" onChange={handleChange} />\n      <SubmitButton onClick={() => handleSearch()}>Search</SubmitButton>\n    </SearchContainer>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { requestURL } from \"../utils/url\";\nimport styled from \"styled-components\";\nimport { IImageData } from \"../index\";\n\nimport { Loading } from \"./Loading\";\nimport { SearchField } from \"./SearchField\";\n\nconst ImagesContainer = styled.div`\n  width: 100%;\n`;\n\nconst IndividualImage = styled.div`\n  width: 100%;\n  margin-bottom: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 30px;\n`;\n\nconst StyledImage = styled.img`\n  width: 400px;\n  height: 400px;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.5);\n`;\n\nconst ImageTitle = styled.h3`\n  color: #000;\n  width: 70%;\n  text-align: center;\n`;\n\ninterface IImagesProps {\n  setShouldShowIndividualImageDetails: (val: boolean) => void;\n  shouldShowIndividualImageDetails: boolean;\n  setSelectedImage: (val: IImageData) => void;\n}\n\nexport const Images = (props: IImagesProps): JSX.Element => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [imageData, setImageData] = useState<IImageData[] | null>(null);\n\n  useEffect(() => {\n    fetchImages();\n  }, []);\n\n  async function fetchImages() {\n    setIsLoading(true);\n    try {\n      const res = await fetch(requestURL);\n      const json = await res.json();\n      const formattedImages: IImageData[] = [];\n      json.data.children.forEach((child: any) => {\n        const imagePostData = {\n          url: child.data.url,\n          id: child.data.id,\n          title: child.data.title,\n          score: child.data.score,\n          author: child.data.author,\n          upvote_ratio: child.data.upvote_ratio,\n        };\n        formattedImages.push(imagePostData);\n      });\n      setImageData(formattedImages);\n      setIsLoading(false);\n    } catch (err) {\n      console.warn(err);\n    }\n  }\n  const handleImageClick = (image: IImageData): void => {\n    props.setSelectedImage(image);\n    props.setShouldShowIndividualImageDetails(\n      !props.shouldShowIndividualImageDetails\n    );\n  };\n  return (\n    <ImagesContainer>\n      {isLoading && <Loading />}\n      {!isLoading && (\n        <SearchField\n          setSelectedImage={props.setSelectedImage}\n          setShouldShowIndividualImageDetails={\n            props.setShouldShowIndividualImageDetails\n          }\n          imageData={imageData}\n        />\n      )}\n\n      {!!imageData &&\n        imageData.map((image: IImageData) => {\n          return (\n            <IndividualImage key={image.id}>\n              <StyledImage\n                src={image.url}\n                onClick={() => handleImageClick(image)}\n              />\n              <ImageTitle>{image.title}</ImageTitle>\n            </IndividualImage>\n          );\n        })}\n    </ImagesContainer>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { IImageData } from \"../index\";\n\nconst IndividualImageContainer = styled.div`\n  width: 100%;\n  height: 700px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 30px;\n  margin-top: 25px;\n`;\n\nconst DetailsContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Title = styled.h1`\n  color: #000;\n  width: 90%;\n  text-align: center;\n`;\n\nconst IndividualImageDetailsContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-evenly;\n  height: 430px;\n`;\n\nconst ImageContainer = styled.div`\n  width: 50%;\n  display: flex;\n`;\n\nconst TextContainer = styled.div`\n  width: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst StyledImage = styled.img`\n  width: 400px;\n  height: 400px;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.5);\n`;\n\nconst Text = styled.p`\n  fonet-weight: 700;\n  text-align: center;\n`;\n\nconst ReturnButton = styled.button`\n  height: 75px;\n  width: 200px;\n  margin-top: 20px;\n  font-size: 16px;\n  background-color: #008cba;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.5);\n`;\n\ninterface IImageDetailsProps {\n  setShouldShowIndividualImageDetails: (val: boolean) => void;\n  selectedImage: IImageData | null;\n  shouldShowIndividualImageDetails: boolean;\n}\nexport const ImageDetails = (props: IImageDetailsProps): JSX.Element => {\n  const { selectedImage } = props;\n\n  return (\n    <IndividualImageContainer>\n      <DetailsContainer>\n        <Title>{selectedImage?.title}</Title>\n        <IndividualImageDetailsContainer>\n          <ImageContainer>\n            {!!selectedImage && <StyledImage src={selectedImage.url} />}\n          </ImageContainer>\n          <TextContainer>\n            {!!selectedImage && (\n              <Text>This post was created by: {selectedImage.author}</Text>\n            )}\n            {!!selectedImage && (\n              <Text> The Upvote Ratio is: {selectedImage.upvote_ratio}</Text>\n            )}\n            {!!selectedImage && (\n              <Text> The Score is: {selectedImage.score}</Text>\n            )}\n          </TextContainer>\n        </IndividualImageDetailsContainer>\n        <ReturnButton\n          onClick={() =>\n            props.setShouldShowIndividualImageDetails(\n              !props.shouldShowIndividualImageDetails\n            )\n          }\n        >\n          Return\n        </ReturnButton>\n      </DetailsContainer>\n    </IndividualImageContainer>\n  );\n};\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styled from \"styled-components\";\nimport \"./index.css\";\n\nimport { Images } from \"./components/Images\";\nimport { ImageDetails } from \"./components/ImageDetails\";\n\nconst BackgroundContainer = styled.div`\n  width: 90%;\n  min-height: 800px;\n  display: flex;\n  flex-direction: column;\n  justify-conent: flex-start;\n  align-items: center;\n  margin: 0 auto;\n  background-color: white;\n  border-radius: 4px;\n  padding: 30px;\n  margin-top: 30px;\n`;\n\nconst MainHeader = styled.h1``;\n\nexport interface IImageData {\n  url: string;\n  title: string;\n  score: number;\n  author: string;\n  id: string;\n  upvote_ratio: number;\n}\n\nexport const App = () => {\n  const [\n    shouldShowIndividualImageDetails,\n    setShouldShowIndividualImageDetails,\n  ] = useState<boolean>(false);\n  const [selectedImage, setSelectedImage] = useState<IImageData | null>(null);\n\n  return (\n    <BackgroundContainer>\n      <MainHeader>\n        Reddit Image{!shouldShowIndividualImageDetails && \"s\"}\n      </MainHeader>\n      {!shouldShowIndividualImageDetails ? (\n        <Images\n          setShouldShowIndividualImageDetails={\n            setShouldShowIndividualImageDetails\n          }\n          shouldShowIndividualImageDetails={shouldShowIndividualImageDetails}\n          setSelectedImage={setSelectedImage}\n        />\n      ) : (\n        <ImageDetails\n          setShouldShowIndividualImageDetails={\n            setShouldShowIndividualImageDetails\n          }\n          selectedImage={selectedImage}\n          shouldShowIndividualImageDetails={shouldShowIndividualImageDetails}\n        />\n      )}\n    </BackgroundContainer>\n  );\n};\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}